using System.Text;
using Microsoft.CodeAnalysis.Text;

namespace GeNet.Common;

internal class DisposableAction : IDisposable
{
    private readonly Action _action;
    public DisposableAction(Action action) => _action = action;
    public void Dispose() => _action();
}

public class SourceBuilder
{
    private const int IndentSize = 4;

    private readonly StringBuilder _stringBuilder = new();
    private int _indent = 0;

    public void AppendHeader()
    {
        AppendLine("//-----------------------------------------------------------------------------");
        AppendLine("/// <auto-generated>");
        AppendLine("///     This code was generated by https://github.com/GregDomzalski/GeNet");
        AppendLine("///");
        AppendLine("///     Changes to this file may cause incorrect behavior and will be lost if the code");
        AppendLine("///     is regenerated.");
        AppendLine("/// </auto-generated>");
        AppendLine("//-----------------------------------------------------------------------------");
        AppendLine();
    }

    public IDisposable Block(string text)
    {
        AppendLine(text);
        AppendLine("{");
        _indent++;
        return new DisposableAction(() =>
        {
            _indent--;
            AppendLine("}\n");
        });
    }

    public IDisposable? Namespace(string? nsName) =>
        nsName is null
            ? null
            : Block($"namespace {nsName}");

    public void AppendLine() => _stringBuilder.AppendLine();
    public void AppendLine(string text) => _stringBuilder.AppendLine(new string(' ', _indent * IndentSize) + text);
    public void AppendLines(IEnumerable<string> lines)
    {
        foreach (var line in lines)
        {
            AppendLine(line.TrimEnd('\r'));
        }
    }

    public void AppendLines(IEnumerable<string> lines, string prefix, string joiner, string postfix)
    {
        _stringBuilder.Append(new string(' ', _indent * IndentSize) + prefix + " ");
        _stringBuilder.Append(string.Join($"\n{new string(' ', (_indent + 1) * IndentSize)}{joiner} ", lines));
        _stringBuilder.AppendLine(postfix);
    }

    public static implicit operator SourceText(SourceBuilder sourceBuilder) =>
        SourceText.From(sourceBuilder._stringBuilder.ToString(), Encoding.UTF8);

    public SourceText ToSourceText() => SourceText.From(_stringBuilder.ToString(), Encoding.UTF8);
}
